// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CentralClient is the client API for Central service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentralClient interface {
	RequestToken(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Token, error)
	ReturnToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Ack, error)
}

type centralClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralClient(cc grpc.ClientConnInterface) CentralClient {
	return &centralClient{cc}
}

func (c *centralClient) RequestToken(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/proto.Central/requestToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralClient) ReturnToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/proto.Central/returnToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentralServer is the server API for Central service.
// All implementations must embed UnimplementedCentralServer
// for forward compatibility
type CentralServer interface {
	RequestToken(context.Context, *Node) (*Token, error)
	ReturnToken(context.Context, *Token) (*Ack, error)
	mustEmbedUnimplementedCentralServer()
}

// UnimplementedCentralServer must be embedded to have forward compatible implementations.
type UnimplementedCentralServer struct {
}

func (UnimplementedCentralServer) RequestToken(context.Context, *Node) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestToken not implemented")
}
func (UnimplementedCentralServer) ReturnToken(context.Context, *Token) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnToken not implemented")
}
func (UnimplementedCentralServer) mustEmbedUnimplementedCentralServer() {}

// UnsafeCentralServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentralServer will
// result in compilation errors.
type UnsafeCentralServer interface {
	mustEmbedUnimplementedCentralServer()
}

func RegisterCentralServer(s grpc.ServiceRegistrar, srv CentralServer) {
	s.RegisterService(&Central_ServiceDesc, srv)
}

func _Central_RequestToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralServer).RequestToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Central/requestToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralServer).RequestToken(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Central_ReturnToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralServer).ReturnToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Central/returnToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralServer).ReturnToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// Central_ServiceDesc is the grpc.ServiceDesc for Central service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Central_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Central",
	HandlerType: (*CentralServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "requestToken",
			Handler:    _Central_RequestToken_Handler,
		},
		{
			MethodName: "returnToken",
			Handler:    _Central_ReturnToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl.proto",
}
